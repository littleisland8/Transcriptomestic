configfile: "config/config.yaml"

include: "rules/fastqc.smk"
include: "rules/fastp.smk"
include: "rules/STAR.smk"
include: "rules/BigWig.smk"
include: "rules/htseq.smk"
include: "rules/featureCounts.smk"
include: "rules/DESeqFromHTSeqCount.smk"
include: "rules/DESeqFromFeatureCounts.smk"

rule fastqc:
	input:
		expand(f"qc/{{sample}}_{{strand}}_fastqc.html", sample=config["samples"].values(), strand=config["strand"].values()),
		expand(f"qc/{{sample}}_{{strand}}_tr_fastqc.html", sample=config["samples"].values(), strand=config["strand"].values())

rule STAR:
	input:
		"resources/GRCh38_full_analysis_set_plus_decoy_hla/Log.out",
		expand(f"alignments/{{sample}}.{{aligner}}.STAR.Aligned.sortedByCoord.out.bam.bai", sample=config["samples"].values(), aligner=config["aligners"].values())

rule BigWig:
	input:
		expand(f"alignments/{{sample}}.{{aligner}}.bw", sample=config["samples"].values(), aligner=config["aligners"].values())

rule Htseq:
	input:
		expand(f"count/htseq/{{sample}}.{{aligner}}.gene.count", sample=config["samples"].values(), aligner=config["aligners"].values())

rule featurecounts:
		input:
			expand(f"count/featureCounts/{{sample}}.{{aligner}}.gene.count.featureCounts.tsv", sample=config["samples"].values(), aligner=config["aligners"].values())

rule STAR_HTSeq:
	input:
		expand(f"qc/{{sample}}_{{strand}}_fastqc.html", sample=config["samples"].values(), strand=config["strand"].values()),
		expand(f"qc/{{sample}}_{{strand}}_tr_fastqc.html", sample=config["samples"].values(), strand=config["strand"].values()),
		expand(f"count/htseq/{{sample}}.{{aligner}}.gene.count", sample=config["samples"].values(), aligner=config["aligners"].values()),
		directory("results/STAR_HTseq")

rule STAR_featureCounts:
	input:
		expand(f"qc/{{sample}}_{{strand}}_fastqc.html", sample=config["samples"].values(), strand=config["strand"].values()),
		expand(f"qc/{{sample}}_{{strand}}_tr_fastqc.html", sample=config["samples"].values(), strand=config["strand"].values()),
		expand(f"count/featureCounts/{{sample}}.{{aligner}}.gene.count.featureCounts.tsv", sample=config["samples"].values(), aligner=config["aligners"].values()),
		directory("results/STAR_featureCounts")
